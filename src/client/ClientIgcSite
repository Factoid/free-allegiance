#ifndef __CLIENT_IGC_SITE__
#define __CLIENT_IGC_SITE__

#include <igc/igc.h>
#include "exceptions"
#include <osgViewer/Viewer>

namespace fa
{
  class ClientIgcSite : public IIgcSite, public osgViewer::Viewer
  {
    virtual Time ServerTimeFromClientTime(Time   timeClient)
    {
      return timeClient;
    }
    virtual Time ClientTimeFromServerTime(Time   timeServer)
    {
      return timeServer;
    }
    void DevelopmentCompleted(IbucketIGC* b, IdevelopmentIGC* d, Time now);
    void StationTypeCompleted(IbucketIGC*  b, IstationIGC* pstation, IstationTypeIGC* st, Time now);
    void HullTypeCompleted(IsideIGC* pside, IhullTypeIGC* pht);
    void PartTypeCompleted(IsideIGC* pside, IpartTypeIGC* ppt);
    void DroneTypeCompleted(IbucketIGC* b, IstationIGC* pstation, IdroneTypeIGC* dt, Time now);
    void BucketChangeEvent(BucketChange bc, IbucketIGC* b);
    void SideBuildingTechChange(IsideIGC* s);
    void SideDevelopmentTechChange(IsideIGC* s);
    void SideGlobalAttributeChange(IsideIGC* s);
    void StationTypeChange(IstationIGC* s);
    void ClusterUpdateEvent(IclusterIGC* c);
    void BuildStation(IasteroidIGC* pasteroid, IsideIGC* pside, IstationTypeIGC* pstationtype, Time now, bool pbseensides[]);
    TRef<ThingSite> CreateThingSite(ImodelIGC* pModel);
    TRef<ClusterSite> CreateClusterSite(IclusterIGC* pCluster);
    void ReceiveChat(IshipIGC* pshipSender, ChatTarget ctRecipient, ObjectID oidRecipient, SoundID voiceOver, const char* szText, CommandID cid, ObjectType otTarget, ObjectID oidTarget, ImodelIGC* pmodelTarget = NULL);
    void SendChat(IshipIGC* pshipSender, ChatTarget chatTarget, ObjectID oidRecipient, SoundID soVoiceOver, const char* szText, CommandID cid = c_cidNone, ObjectType otTarget = NA, ObjectID oidTarget = NA, ImodelIGC* pmodelTarget = NULL, bool bObjectModel = false);
    void SendChatf(IshipIGC* pshipSender, ChatTarget ctRecipient, ObjectID oidRecipient, SoundID soVoiceOver, const char* pszText, ...);
    void GetMoneyRequest(IshipIGC*  pshipSender, Money amount, HullID hidFor);
    void PlaySoundEffect(SoundID soundID, ImodelIGC* model = NULL);
    void PlaySoundEffect(SoundID soundID, ImodelIGC* model, const Vector& vectOffset);
    void PlayNotificationSound(SoundID soundID, ImodelIGC* model);
    void PlayFFEffect(ForceEffectID effectID, ImodelIGC* model = NULL, LONG lDirection = 0);
    void PlayVisualEffect(VisualEffectID effectID, ImodelIGC* model = NULL, float fIntensity = 1.0f);
    int  MessageBox(const ZString& strText, const ZString& strCaption, UINT nType);
    void TerminateModelEvent(ImodelIGC* model);
    void TerminateMissionEvent(ImissionIGC* pMission);
    void KillAsteroidEvent(IasteroidIGC* pasteroid, bool explodeF);
    void KillAsteroidEvent(AsteroidID roid, SectorID soid, IsideIGC* side);
    void DrainAsteroidEvent(IasteroidIGC* pasteroid);
    void MineAsteroidEvent(IasteroidIGC* pasteroid, float newOre);
    void KillProbeEvent(IprobeIGC* pprobe);
    void KillMissileEvent(ImissileIGC* pmissile, const Vector& position);
    void KillBuildingEffectEvent(IbuildingEffectIGC* pbe);
    void KillMineEvent(ImineIGC* pmine);
    void KillTreasureEvent(ItreasureIGC* ptreasure);
    void PostText(bool bCritical, const char* pszText, ...);
    void PostNotificationText(ImodelIGC* pmodel, bool bCritical, const char* pszText, ...);
    void EjectPlayer(ImodelIGC* pmodelCredit);
    void TargetKilled(ImodelIGC* pmodel);
    void ShipWarped(IshipIGC* pship, SectorID sidOld, SectorID sidNew);
    void DamageShipEvent(Time now, IshipIGC* ship, ImodelIGC* launcher, DamageTypeID type, float amount, float leakage, const Vector& p1, const Vector& p2);
    void KillShipEvent(Time now, IshipIGC* ship, ImodelIGC* launcher, float amount, const Vector& p1, const Vector& p2);
    void DamageStationEvent(IstationIGC* station, ImodelIGC* launcher, DamageTypeID type, float amount);
    void KillStationEvent(IstationIGC* station, ImodelIGC* launcher, float amount);
    bool DockWithStationEvent(IshipIGC* ship, IstationIGC* station);
    void CaptureStationEvent(IshipIGC* ship, IstationIGC* station);
    bool LandOnCarrierEvent(IshipIGC* shipCarrier, IshipIGC* ship, float tCollision);
    bool RescueShipEvent(IshipIGC* shipRescued, IshipIGC* shipRescuer);
    void WarpBombEvent(IwarpIGC* pwap, ImissileIGC* pmissile);
    void HitWarpEvent(IshipIGC* ship, IwarpIGC* warp);
    bool HitTreasureEvent(Time now, IshipIGC* ship, ItreasureIGC* treasure);
    void PaydayEvent(IsideIGC* pside, float money);
    void RequestRipcord(IshipIGC* ship, IclusterIGC* pcluster);
    bool ContinueRipcord(IshipIGC* ship, ImodelIGC* pmodel);
    bool UseRipcord(IshipIGC* ship, ImodelIGC* pmodel);
    void FireMissile(IshipIGC* pship, ImagazineIGC* pmagazine, Time timeFired, ImodelIGC* pTarget, float lock);
    void FireExpendable(IshipIGC* pship, IdispenserIGC* pdispenser, Time timeFired);
    void *GetDroneFromShip(IshipIGC * pship);
    void CreateSideEvent(IsideIGC * pIsideIGC);
    void DestroySideEvent(IsideIGC * pIsideIGC);
    void ChangeStation(IshipIGC* pship, IstationIGC* pstationOld, IstationIGC* pstationNew);
    void ChangeCluster(IshipIGC* pship, IclusterIGC* pclusterOld, IclusterIGC* pclusterNew);
    void CommandChangedEvent(Command i, IshipIGC * pship, ImodelIGC* ptarget, CommandID cid);
    void Preload(const char* pszModelName, const char* pszFileName);
    void ActivateTeleportProbe(IprobeIGC* pprobe);
    void DestroyTeleportProbe(IprobeIGC* pprobe);
    void LoadoutChangeEvent(IshipIGC* pship, IpartIGC* ppart, LoadoutChange lc);
    IObject* LoadRadarIcon(const char* szName);
    void ChangeGameState(void);
    void CreateBuildingEffect(Time now, IasteroidIGC* pasteroid, IshipIGC* pshipBuilder);
    void LayExpendable( Time now, IexpendableTypeIGC* pet, IshipIGC* pshipLayer);
    IclusterIGC* GetCluster(IshipIGC* pship, ImodelIGC* pmodel);
    IclusterIGC* GetRipcordCluster(IshipIGC* pship, HullAbilityBitMask habm = c_habmIsRipcordTarget);
    bool Reload(IshipIGC* pship, IlauncherIGC* plauncher, EquipmentType type);
  };
}

#endif
