#ifndef __MODEL_DEFINITION_H__
#define __MODEL_DEFINITION_H__

#include "Frame"
#include "Geo"
#include "Light"
#include <osg/Node>
#include <string>
#include <vector>
#include <memory>
#include <cereal/archives/json.hpp>
#include <cereal/types/vector.hpp>
#include <cereal/types/memory.hpp>
#include <cereal/types/polymorphic.hpp>

namespace fa
{
  class ModelDefinition
  {
  public:
    float frame;
    std::vector<Frame> frames;
    std::unique_ptr<Geo> object;
    std::vector<Light> lights;

  public:
    ModelDefinition();
    void buildGraph( osg::ref_ptr<osg::Node> root );
    template <class Archive> void serialize( Archive& ar )
    {
      try
      {
        ar( CEREAL_NVP(frame) );
      } catch(...) {
		std::cerr << "No frame" << std::endl;
	  }
      try
      {
        ar( CEREAL_NVP(frames) );
      } catch(...) {
		std::cerr << "No frames" << std::endl;
	  }
      try
      {
        ar( CEREAL_NVP(object) );
      } catch(...) {
		std::cerr << "No object" << std::endl;
	  }
      try
      {
        ar( CEREAL_NVP(lights) );
      } catch(...) {
		std::cerr << "No lights\n";
	  }
    }

    void save( const std::string& path ) const;
    void load( const std::string& path );
  };
}
#endif
